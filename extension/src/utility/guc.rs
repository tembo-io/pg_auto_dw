use pgrx::guc::*;
use std::ffi::CStr;

// Default not set due to security boundaries associated with extension install.
// The background process has no way to determine which database the extension is installed in.
// When the extension is being created, the database name can only be saved at the session level into the GUC.
pub static PG_AUTO_DW_DATABASE_NAME: GucSetting<Option<&CStr>> = GucSetting::<Option<&CStr>>::new(None);

// Default not set, as this will make direct changes to the database
pub static PG_AUTO_DW_DW_SCHEMA: GucSetting<Option<&CStr>> = GucSetting::<Option<&CStr>>::new(None);

// Default set to Ollama
pub static PG_AUTO_DW_TRANSFORMER_SERVER_TYPE: GucSetting<Option<&CStr>> = GucSetting::<Option<&CStr>>::new(Some(unsafe {
    CStr::from_bytes_with_nul_unchecked(b"ollama\0")
}));

// Default Transformer Server URL
pub static PG_AUTO_DW_TRANSFORMER_SERVER_URL: GucSetting<Option<&CStr>> = GucSetting::<Option<&CStr>>::new(Some(unsafe {
    CStr::from_bytes_with_nul_unchecked(b"http://localhost:11434/api/generate\0")
}));

// Default not set
pub static PG_AUTO_DW_TRANSFORMER_SERVER_TOKEN: GucSetting<Option<&CStr>> = GucSetting::<Option<&CStr>>::new(None);

// Default model is "mistral"
pub static PG_AUTO_DW_MODEL: GucSetting<Option<&CStr>> = GucSetting::<Option<&CStr>>::new(Some(unsafe {
    CStr::from_bytes_with_nul_unchecked(b"mistral\0")
}));

// The accepted transformer's, self-described, confidence level - default 0.8.
pub static PG_AUTO_DW_ACCEPTED_TRANSFORMER_CONFIDENCE_LEVEL: GucSetting<f64> = GucSetting::<f64>::new(0.8);


pub fn init_guc() {
    // Register the GUCs
    GucRegistry::define_string_guc(
        "pg_auto_dw.database_name",
        "Database name for the pg_auto_dw extension.",
        "Specifies the name of the database where the pg_auto_dw extension will be utilized.",
        &PG_AUTO_DW_DATABASE_NAME,
        GucContext::Suset,
        GucFlags::default(),
    );

    GucRegistry::define_string_guc(
        "pg_auto_dw.dw_schema",
        "Data warehouse schema for the pg_auto_dw extension.",
        "Specifies the name of the schema within the database where the pg_auto_dw extension will automatically create and store data warehouse components.",
        &PG_AUTO_DW_DW_SCHEMA,
        GucContext::Suset,
        GucFlags::default(),
    );

    GucRegistry::define_string_guc(
        "pg_auto_dw.transformer_server_type",
        "Transformer server type for the pg_auto_dw extension.",
        "Specifies the server type used by the pg_auto_dw extension.  Current available server types include, ollama and openai.",
        &PG_AUTO_DW_TRANSFORMER_SERVER_TYPE,
        GucContext::Suset,
        GucFlags::default(),
    );

    GucRegistry::define_string_guc(
        "pg_auto_dw.transformer_server_url",
        "Transformer URL for the pg_auto_dw extension.",
        "Specifies the URL for the transformer service used by the pg_auto_dw extension.",
        &PG_AUTO_DW_TRANSFORMER_SERVER_URL,
        GucContext::Suset,
        GucFlags::default(),
    );

    GucRegistry::define_string_guc(
        "pg_auto_dw.transformer_server_token",
        "Bearer token for authenticating API calls to the Transformer Server for the pg_auto_dw extension.",
        "The Bearer token is required for authenticating API calls to the Transformer Server when interacting with the pg_auto_dw extension.",
        &PG_AUTO_DW_TRANSFORMER_SERVER_TOKEN,
        GucContext::Suset,
        GucFlags::default(),
    );

    GucRegistry::define_string_guc(
        "pg_auto_dw.model",
        "Transformer model for the pg_auto_dw extension.",
        "Specifies the transformer model to be used by the pg_auto_dw extension for data processing or analysis.",
        &PG_AUTO_DW_MODEL,
        GucContext::Suset,
        GucFlags::default(),
    );

    GucRegistry::define_float_guc(
        "pg_auto_dw.accepted_transformer_confidence_level",
        "Transformers generated confidence level for the pg_auto_dw extension.",
        "Specifies the confidence level threshold generated by the transformer model for the operations performed by the pg_auto_dw extension.",
        &PG_AUTO_DW_ACCEPTED_TRANSFORMER_CONFIDENCE_LEVEL,
        0.0, // min value
        1.0, // max value
        GucContext::Suset,
        GucFlags::default(),
    );

}

// For handling of GUCs that can be error prone
#[derive(Clone, Debug)]
pub enum PgAutoDWGuc {
    DatabaseName,
    DwSchema,
    TransformerServerType,
    TransformerServerUrl,
    TransformerServerToken,
    Model,
    AcceptedTransformerConfidenceLevel,
}

// A convenience function to get this project's GUCs
pub fn get_guc(guc: PgAutoDWGuc) -> Option<String> {
    match guc {
        PgAutoDWGuc::DatabaseName => cstr_option_to_string(PG_AUTO_DW_DATABASE_NAME.get()),
        PgAutoDWGuc::DwSchema => cstr_option_to_string(PG_AUTO_DW_DW_SCHEMA.get()),
        PgAutoDWGuc::TransformerServerType => cstr_option_to_string(PG_AUTO_DW_TRANSFORMER_SERVER_TYPE.get()),
        PgAutoDWGuc::TransformerServerUrl => cstr_option_to_string(PG_AUTO_DW_TRANSFORMER_SERVER_URL.get()),
        PgAutoDWGuc::TransformerServerToken => cstr_option_to_string(PG_AUTO_DW_TRANSFORMER_SERVER_TOKEN.get()),
        PgAutoDWGuc::Model => cstr_option_to_string(PG_AUTO_DW_MODEL.get()),
        PgAutoDWGuc::AcceptedTransformerConfidenceLevel => cstr_from_float(PG_AUTO_DW_ACCEPTED_TRANSFORMER_CONFIDENCE_LEVEL.get()),
    }
}

fn cstr_option_to_string(cstr_o: Option<&CStr>) -> Option<String> {
    cstr_o.and_then(|cstr| cstr.to_str().ok().map(|s| s.to_owned()))
}

fn cstr_from_float(val: f64) -> Option<String> {
    Some(val.to_string())
}

