use pgrx::prelude::*;
use pgrx::guc::*;
use std::ffi::CStr;

use anyhow::Result;

pub static PG_AUTO_DW_DATABASE_NAME: GucSetting<Option<&CStr>> = GucSetting::<Option<&CStr>>::new(None);
pub static PG_AUTO_DW_DW_SCHEMA: GucSetting<Option<&CStr>> = GucSetting::<Option<&CStr>>::new(None);
pub static PG_AUTO_DW_OLLAMA_URL: GucSetting<Option<&CStr>> = GucSetting::<Option<&CStr>>::new(None);
pub static PG_AUTO_DW_MODEL: GucSetting<Option<&CStr>> = GucSetting::<Option<&CStr>>::new(None);

// Default confidence level value is 0.8
pub static PG_AUTO_DW_CONFIDENCE_LEVEL: GucSetting<f64> = GucSetting::<f64>::new(0.8);


pub fn init_guc() {
    // Register the GUCs
    GucRegistry::define_string_guc(
        "pg_auto_dw.database_name",
        "Database name for the pg_auto_dw extension.",
        "Specifies the name of the database where the pg_auto_dw extension will be utilized.",
        &PG_AUTO_DW_DATABASE_NAME,
        GucContext::Suset,
        GucFlags::default(),
    );

    GucRegistry::define_string_guc(
        "pg_auto_dw.dw_schema",
        "Data warehouse schema for the pg_auto_dw extension.",
        "Specifies the name of the schema within the database where the pg_auto_dw extension will automatically create and store data warehouse components.",
        &PG_AUTO_DW_DW_SCHEMA,
        GucContext::Suset,
        GucFlags::default(),
    );

    GucRegistry::define_string_guc(
        "pg_auto_dw.ollama_url",
        "Ollama URL for the pg_auto_dw extension.",
        "Specifies the URL for the Ollama service used by the pg_auto_dw extension.",
        &PG_AUTO_DW_OLLAMA_URL,
        GucContext::Suset,
        GucFlags::default(),
    );

    GucRegistry::define_string_guc(
        "pg_auto_dw.model",
        "Transformer model for the pg_auto_dw extension.",
        "Specifies the transformer model to be used by the pg_auto_dw extension for data processing or analysis.",
        &PG_AUTO_DW_MODEL,
        GucContext::Suset,
        GucFlags::default(),
    );

    GucRegistry::define_float_guc(
        "pg_auto_dw.confidence_level",
        "Transformers generated confidence level for the pg_auto_dw extension.",
        "Specifies the confidence level threshold generated by the transformer model for the operations performed by the pg_auto_dw extension.",
        &PG_AUTO_DW_CONFIDENCE_LEVEL,
        0.0, // min value
        1.0, // max value
        GucContext::Suset,
        GucFlags::default(),
    );

}

// For handling of GUCs that can be error prone
#[derive(Clone, Debug)]
pub enum PgAutoDWGuc {
    DatabaseName,
    DwSchema,
    OllamaUrl,
    Model,
    ConfidenceLevel,
}

/// A convenience function to get this project's GUCs
pub fn get_guc(guc: PgAutoDWGuc) -> Option<String> {

    let val = match guc {
        PgAutoDWGuc::DatabaseName => PG_AUTO_DW_DATABASE_NAME.get(),
        PgAutoDWGuc::DwSchema => PG_AUTO_DW_DW_SCHEMA.get(),
        PgAutoDWGuc::OllamaUrl => PG_AUTO_DW_OLLAMA_URL.get(),
        PgAutoDWGuc::Model => PG_AUTO_DW_MODEL.get(),
        PgAutoDWGuc::ConfidenceLevel => return Some(PG_AUTO_DW_CONFIDENCE_LEVEL.get().to_string()),
    };

    if let Some(cstr) = val {
        if let Ok(s) = handle_cstr(cstr) {
            Some(s)
        } else {
            error!("failed to convert CStr to str");
        }
    } else {
        info!("no value set for GUC: {:?}", guc);
        None
    }
}

#[allow(dead_code)]
fn handle_cstr(cstr: &CStr) -> Result<String> {
    if let Ok(s) = cstr.to_str() {
        Ok(s.to_owned())
    } else {
        Err(anyhow::anyhow!("failed to convert CStr to str"))
    }
}

